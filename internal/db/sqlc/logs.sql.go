// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: logs.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createLog = `-- name: CreateLog :one
INSERT INTO logs (user_id,description) VALUES ($1,$2) RETURNING id, user_id, description, created_at
`

type CreateLogParams struct {
	UserID      uuid.UUID `json:"user_id"`
	Description string    `json:"description"`
}

func (q *Queries) CreateLog(ctx context.Context, arg CreateLogParams) (Log, error) {
	row := q.db.QueryRow(ctx, createLog, arg.UserID, arg.Description)
	var i Log
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const deleteLog = `-- name: DeleteLog :exec
DELETE FROM logs
WHERE id = $1
`

func (q *Queries) DeleteLog(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteLog, id)
	return err
}

const getLog = `-- name: GetLog :one
SELECT id, user_id, description, created_at FROM logs WHERE id = $1
`

func (q *Queries) GetLog(ctx context.Context, id uuid.UUID) (Log, error) {
	row := q.db.QueryRow(ctx, getLog, id)
	var i Log
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const listLogs = `-- name: ListLogs :one
SELECT id, user_id, description, created_at FROM logs ORDER BY id LIMIT $1 OFFSET $2
`

type ListLogsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListLogs(ctx context.Context, arg ListLogsParams) (Log, error) {
	row := q.db.QueryRow(ctx, listLogs, arg.Limit, arg.Offset)
	var i Log
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}
